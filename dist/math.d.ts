export declare function round(x: number, decimal?: number): number;
export declare function round2str(x: number, decimal: number): string;
export declare let floor: (x: number) => number;
export declare let ceil: (x: number) => number;
export declare function constrain(v: number, l1: number, l2: number): number;
export declare function sq(v: number): number;
export declare let pow: (x: number, y: number) => number;
export declare let sqrt: (x: number) => number;
export declare let abs: (x: number) => number;
export declare function max(numbers: number[]): number;
export declare function min(numbers: number[]): number;
export declare function sum(numbers: number[]): number;
export declare function avg(numbers: number[]): number;
export declare function centile(data: number[], c: number): number;
export declare function revCentile(data: number[], n: number): number;
export declare function iqr(data: number[]): number;
export declare function dataRange(data: number[]): number;
declare type SDevMethod = 'sample' | 'population';
export declare function stdDev(data: number[], method?: SDevMethod): number;
export declare class Vector {
    private _x;
    private _y;
    constructor(x: number, y: number);
    set(x: number, y: number): void;
    get x(): number;
    get y(): number;
    set x(v: number);
    set y(v: number);
    get xy(): [number, number];
    copy(): Vector;
    add(v: Vector): Vector;
    add2(v: Vector): void;
    sub(v: Vector): Vector;
    sub2(v: Vector): void;
    mult(s: number): Vector;
    mult2(s: number): void;
    div(s: number): Vector;
    div2(s: number): void;
    dot(v: Vector): number;
    norm(): Vector;
    norm2(): void;
    get direction(): number;
    set direction(angle: number);
    get magnitude(): number;
    set magnitude(magnitude: number);
    limit(limitScalar: number): void;
}
export declare const E: number, PI: number, TWO_PI: number, HALF_PI: number, PHI: number;
export declare let sin: (x: number) => number, cos: (x: number) => number, tan: (x: number) => number, asin: (x: number) => number, acos: (x: number) => number, atan: (x: number) => number, atan2: (y: number, x: number) => number;
export declare function dist(x1: number, y1: number, x2: number, y2: number): number;
export {};
